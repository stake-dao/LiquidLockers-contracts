/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VeBoostProxyInterface extends utils.Interface {
  contractName: "VeBoostProxy";
  functions: {
    "adjusted_balance_of(address)": FunctionFragment;
    "kill_delegation()": FunctionFragment;
    "set_delegation(address)": FunctionFragment;
    "commit_admin(address)": FunctionFragment;
    "accept_transfer_ownership()": FunctionFragment;
    "voting_escrow()": FunctionFragment;
    "delegation()": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjusted_balance_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kill_delegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_delegation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_admin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accept_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adjusted_balance_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kill_delegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_delegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accept_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;

  events: {
    "CommitAdmin(address)": EventFragment;
    "ApplyAdmin(address)": EventFragment;
    "DelegationSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationSet"): EventFragment;
}

export type CommitAdminEvent = TypedEvent<[string], { admin: string }>;

export type CommitAdminEventFilter = TypedEventFilter<CommitAdminEvent>;

export type ApplyAdminEvent = TypedEvent<[string], { admin: string }>;

export type ApplyAdminEventFilter = TypedEventFilter<ApplyAdminEvent>;

export type DelegationSetEvent = TypedEvent<[string], { delegation: string }>;

export type DelegationSetEventFilter = TypedEventFilter<DelegationSetEvent>;

export interface VeBoostProxy extends BaseContract {
  contractName: "VeBoostProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VeBoostProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjusted_balance_of(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kill_delegation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_delegation(
      _delegation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;
  };

  adjusted_balance_of(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kill_delegation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_delegation(
    _delegation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_admin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  delegation(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adjusted_balance_of(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill_delegation(overrides?: CallOverrides): Promise<void>;

    set_delegation(
      _delegation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_admin(_admin: string, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    delegation(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CommitAdmin(address)"(admin?: null): CommitAdminEventFilter;
    CommitAdmin(admin?: null): CommitAdminEventFilter;

    "ApplyAdmin(address)"(admin?: null): ApplyAdminEventFilter;
    ApplyAdmin(admin?: null): ApplyAdminEventFilter;

    "DelegationSet(address)"(delegation?: null): DelegationSetEventFilter;
    DelegationSet(delegation?: null): DelegationSetEventFilter;
  };

  estimateGas: {
    adjusted_balance_of(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill_delegation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_delegation(
      _delegation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjusted_balance_of(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill_delegation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_delegation(
      _delegation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
